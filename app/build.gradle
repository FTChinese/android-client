apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// NOTE: this does not work in Android Studio, although Google and Kotlin all says it works.
//apply plugin: 'kotlin-kapt'

// See:
// https://stackoverflow.com/questions/37101589/how-to-read-a-properties-files-and-use-the-values-in-project-gradle-script/37101792
// https://stackoverflow.com/questions/45586839/android-read-build-gradle-properties-inside-class
// https://medium.com/@abhi007tyagi/storing-api-keys-using-android-ndk-6abb0adcadad
def props = new Properties()
file("$rootDir/config.properties").withInputStream { props.load(it) }

// Creates a variable called keystorePropertiesFile, and initializes it to the
// keystore.properties file.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initializes a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Loads the keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.ft.ftchinese"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 5
        versionName "1.1.3"
        setProperty("archivesBaseName", "ftchinese-v$versionName")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "WX_SUBS_APPID", props.getProperty("wechat.subs.appId")
        buildConfigField "String", "WX_OAUTH_APPID", props.getProperty("wechat.oauth.appId")
        buildConfigField "String", "ACCESS_TOKEN", props.getProperty("access_token")
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
            }
        }
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file("$rootDir/android.jks")
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            // Adds the "release" signing configuration to the release build type.
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
        }
    }

//    flavorDimensions "version"
//    productFlavors {
//        google {
//            dimension "version"
//        }
//        xiaomi {
//            dimension "version"
//        }
//    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//    }
}

dependencies {
    implementation(name: 'alipaySdk-15.5.7-20181023110917', ext: 'aar')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    //  UI
    implementation "androidx.appcompat:appcompat:1.0.2"
    implementation "com.google.android.material:material:1.1.0-alpha04"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.browser:browser:1.0.0"
    implementation "androidx.preference:preference:1.1.0-alpha03"
    implementation "androidx.legacy:legacy-support-v4:$support_version"
    implementation "androidx.recyclerview:recyclerview:1.1.0-alpha02"
    implementation "androidx.cardview:cardview:$support_version"
    implementation "com.makeramen:roundedimageview:2.3.0"
    //  Network
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.beust:klaxon:5.0.2'
    //  ORM. Unfortunately it does not work with Kotlin.
    //  implementation "android.arch.persistence.room:runtime:$room_version"
    //  kapt "android.arch.persistence.room:compiler:$room_version"
    // Wechat
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.3.1'
    // Utilities
    implementation 'com.jakewharton.byteunits:byteunits:0.9.1'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.1'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    // Firebase
    implementation 'com.google.firebase:firebase-core:16.0.7'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.9'
    //    Test
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.github.javafaker:javafaker:0.16'
    androidTestImplementation 'androidx.test:runner:1.1.2-alpha01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.2-alpha01'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'org.robolectric:robolectric:4.0.2'
}
